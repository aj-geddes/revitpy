[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "{{ cookiecutter.project_slug }}"
dynamic = ["version"]
description = "{{ cookiecutter.project_description }}"
readme = "README.md"
license = { text = "{{ cookiecutter.license }}" }
requires-python = ">={{ cookiecutter.python_version }}"
authors = [
    { name = "{{ cookiecutter.author_name }}", email = "{{ cookiecutter.author_email }}" },
]
keywords = [
    "revit",
    "bim",
    "automation",
    "revitpy",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: {{ cookiecutter.license }} License",
    "Programming Language :: Python :: {{ cookiecutter.python_version }}",
    "Topic :: Multimedia :: Graphics :: 3D Modeling",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "revitpy>=1.0.0",
]

[project.optional-dependencies]
dev = [
    {% if cookiecutter.use_pytest == 'y' -%}
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    {% endif -%}
    {% if cookiecutter.use_black == 'y' -%}
    "black>=23.12.0",
    "isort>=5.13.0",
    {% endif -%}
    {% if cookiecutter.use_mypy == 'y' -%}
    "mypy>=1.8.0",
    {% endif -%}
    "ruff>=0.1.9",
]

[project.urls]
Homepage = "https://github.com/{{ cookiecutter.author_name.lower().replace(' ', '') }}/{{ cookiecutter.project_slug }}"
Repository = "https://github.com/{{ cookiecutter.author_name.lower().replace(' ', '') }}/{{ cookiecutter.project_slug }}"
Issues = "https://github.com/{{ cookiecutter.author_name.lower().replace(' ', '') }}/{{ cookiecutter.project_slug }}/issues"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = ["src"]

{% if cookiecutter.use_black == 'y' -%}
[tool.black]
line-length = 88
target-version = ["py{{ cookiecutter.python_version.replace('.', '') }}"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["{{ cookiecutter.project_slug.replace('-', '_') }}"]
{% endif -%}

{% if cookiecutter.use_mypy == 'y' -%}
[tool.mypy]
python_version = "{{ cookiecutter.python_version }}"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
{% endif -%}

[tool.ruff]
target-version = "py{{ cookiecutter.python_version.replace('.', '') }}"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101", "D"]

{% if cookiecutter.use_pytest == 'y' -%}
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
{% endif %}