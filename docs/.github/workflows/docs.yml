name: Deploy Documentation

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'revitpy/**'  # Trigger on API changes for auto-generated docs
      - 'examples/**'  # Include examples in documentation
  pull_request:
    branches:
      - main
    paths:
      - 'docs/**'
  workflow_dispatch:  # Allow manual deployment

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  docs-build-test:
    name: Build and Test Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for git-revision-date-localized

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install mkdocs-material
          pip install mkdocstrings[python]
          pip install mkdocs-git-revision-date-localized-plugin
          pip install mkdocs-git-committers-plugin-2
          pip install mkdocs-social-plugin
          pip install mkdocs-glightbox
          pip install mkdocs-minify-plugin
          pip install pillow cairosvg

      - name: Install Additional Dependencies
        run: |
          # Install dependencies for API documentation generation
          pip install pydantic fastapi
          pip install -r requirements-docs.txt || true

      - name: Configure Git for Plugins
        run: |
          git config --global user.name "docs-bot"
          git config --global user.email "docs@revitpy.dev"

      - name: Build Documentation
        working-directory: docs
        run: |
          # Validate configuration
          mkdocs build --strict --verbose
        env:
          GOOGLE_ANALYTICS_KEY: ${{ secrets.GOOGLE_ANALYTICS_KEY }}

      - name: Test Documentation
        working-directory: docs
        run: |
          # Test that the site was built correctly
          test -f site/index.html
          test -f site/getting-started/index.html
          test -f site/reference/index.html
          test -f site/enterprise/index.html
          
          # Test that API docs were generated
          test -d site/reference/api/
          
          # Test search functionality
          test -f site/search/search_index.json

      - name: Check Links
        run: |
          # Install link checker
          npm install -g markdown-link-check
          
          # Check internal links in key pages
          markdown-link-check docs/index.md --config .github/workflows/link-check-config.json
          markdown-link-check docs/getting-started/installation.md --config .github/workflows/link-check-config.json

      - name: Upload Documentation Artifact
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: documentation-site
          path: docs/site/
          retention-days: 30

  docs-deploy:
    name: Deploy to GitHub Pages
    needs: docs-build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      pages: write
      id-token: write

    concurrency:
      group: "pages"
      cancel-in-progress: false

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install mkdocs-material
          pip install mkdocstrings[python]
          pip install mkdocs-git-revision-date-localized-plugin
          pip install mkdocs-git-committers-plugin-2
          pip install mkdocs-social-plugin
          pip install mkdocs-glightbox
          pip install mkdocs-minify-plugin
          pip install pillow cairosvg

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Build Documentation
        working-directory: docs
        run: mkdocs build --clean
        env:
          GOOGLE_ANALYTICS_KEY: ${{ secrets.GOOGLE_ANALYTICS_KEY }}

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: docs/site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  docs-preview:
    name: Deploy Preview for PR
    needs: docs-build-test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Download Documentation Artifact
        uses: actions/download-artifact@v3
        with:
          name: documentation-site
          path: ./site

      - name: Deploy Preview
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          destination_dir: pr-preview/pr-${{ github.event.number }}
          publish_branch: gh-pages-preview

      - name: Comment PR
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üìñ Documentation preview is available at: https://highvelocitysolutions.github.io/revitpy/pr-preview/pr-${{ github.event.number }}/'
            })

  docs-check-links:
    name: Check External Links
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Link Checker
        run: |
          npm install -g markdown-link-check

      - name: Check Links in Documentation
        run: |
          find docs -name "*.md" -exec markdown-link-check {} \; --config .github/workflows/link-check-config.json

      - name: Create Issue on Link Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Documentation: Broken links detected',
              body: 'The scheduled link check found broken links in the documentation. Please check the workflow logs for details.',
              labels: ['documentation', 'bug', 'automated']
            })

  docs-analyze:
    name: Analyze Documentation Quality
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Analyze Documentation Coverage
        run: |
          # Count documentation files
          TOTAL_MD_FILES=$(find docs -name "*.md" | wc -l)
          TOTAL_API_FILES=$(find revitpy -name "*.py" | grep -v __pycache__ | wc -l)
          
          echo "üìä Documentation Statistics:"
          echo "- Markdown files: $TOTAL_MD_FILES"
          echo "- Python API files: $TOTAL_API_FILES"
          echo "- Documentation ratio: $(($TOTAL_MD_FILES * 100 / $TOTAL_API_FILES))%"

      - name: Check Documentation Standards
        run: |
          echo "üîç Checking documentation standards..."
          
          # Check for required sections in main pages
          required_files=(
            "docs/index.md"
            "docs/getting-started/index.md"
            "docs/tutorials/index.md"
            "docs/reference/index.md"
            "docs/enterprise/index.md"
          )
          
          for file in "${required_files[@]}"; do
            if [[ -f "$file" ]]; then
              echo "‚úÖ $file exists"
            else
              echo "‚ùå $file missing"
              exit 1
            fi
          done

      - name: Validate MkDocs Configuration
        working-directory: docs
        run: |
          # Install MkDocs
          pip install mkdocs-material
          
          # Validate configuration
          mkdocs build --strict --quiet
          echo "‚úÖ MkDocs configuration is valid"

# Schedule link checking weekly
on:
  schedule:
    - cron: '0 9 * * 1'  # Monday at 9 AM UTC