[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "revitpy-basic-element-query"
version = "1.0.0"
description = "Basic Element Query Tool - RevitPy Example Project"
authors = [
    {name = "RevitPy Team", email = "team@revitpy.dev"},
]
readme = "README.md"
license = {file = "LICENSE"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
requires-python = ">=3.9"
dependencies = [
    "revitpy>=1.0.0",
    "pandas>=1.5.0",
    "numpy>=1.24.0",
    "tqdm>=4.64.0",
    "pyyaml>=6.0",
    "click>=8.1.0",
    "structlog>=22.3.0",
    "colorama>=0.4.6",
]

[project.optional-dependencies]
test = [
    "pytest>=7.2.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]
dev = [
    "black>=22.12.0",
    "isort>=5.11.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
]
docs = [
    "sphinx>=5.3.0",
    "sphinx-rtd-theme>=1.2.0",
]
export = [
    "openpyxl>=3.0.10",
    "xlsxwriter>=3.0.8",
    "lxml>=4.9.2",
]

[project.urls]
Homepage = "https://github.com/revitpy/revitpy"
Documentation = "https://docs.revitpy.dev"
Repository = "https://github.com/revitpy/revitpy.git"
Issues = "https://github.com/revitpy/revitpy/issues"

[project.scripts]
element-query = "src.main:main"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*"]

# Black formatting
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
known_first_party = ["revitpy", "src"]

# MyPy type checking
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "revitpy.*"
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]