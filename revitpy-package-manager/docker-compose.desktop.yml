# Simplified Docker Compose for Desktop Package Registry
# Optimized for minimal infrastructure requirements

version: '3.8'

services:
  # Simplified Registry Service
  registry:
    build:
      context: .
      dockerfile: Dockerfile.desktop
    ports:
      - "8000:8000"
    environment:
      # Use SQLite for simplicity
      DATABASE_URL: sqlite:///data/registry.db
      
      # File-based storage
      STORAGE_TYPE: file
      STORAGE_PATH: /data/packages
      
      # Optional Redis for caching (can be disabled)
      REDIS_URL: redis://redis:6379/0
      
      # Simple configuration
      ENVIRONMENT: production
      LOG_LEVEL: INFO
      
      # Security
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-secret-key-change-this}
      ADMIN_TOKEN: ${ADMIN_TOKEN:-admin-token-change-this}
      
    volumes:
      - registry_data:/data
      - ./logs:/app/logs
    
    depends_on:
      - redis
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/stats"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    restart: unless-stopped

  # Optional Redis for caching (can be removed for ultra-minimal setup)
  redis:
    image: redis:7-alpine
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Optional: Nginx for production deployment
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl/certs
      - registry_data:/data/packages:ro  # Serve packages directly
    depends_on:
      - registry
    restart: unless-stopped
    profiles:
      - production

volumes:
  registry_data:
    driver: local
  redis_data:
    driver: local