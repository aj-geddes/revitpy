# Nginx configuration for RevitPy Desktop Package Registry
# Optimized for package distribution and caching

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log  /var/log/nginx/error.log warn;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;  # Allow large package uploads

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=download:10m rate=50r/s;

    # Upstream for registry service
    upstream registry {
        server registry:8000;
        keepalive 32;
    }

    # Package file caching
    proxy_cache_path /var/cache/nginx/packages 
                     levels=1:2 
                     keys_zone=packages:10m 
                     max_size=1g 
                     inactive=60m 
                     use_temp_path=off;

    server {
        listen 80;
        server_name localhost;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";

        # API endpoints (with rate limiting)
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://registry;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Don't cache API responses
            proxy_cache off;
        }

        # Package downloads (with caching and higher rate limit)
        location /api/packages/ {
            limit_req zone=download burst=100 nodelay;
            
            # Cache package downloads for 1 hour
            proxy_cache packages;
            proxy_cache_valid 200 1h;
            proxy_cache_valid 404 5m;
            proxy_cache_key "$request_uri";
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;
            
            # Add cache status header for debugging
            add_header X-Cache-Status $upstream_cache_status;
            
            proxy_pass http://registry;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Increase timeouts for large downloads
            proxy_connect_timeout 5s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }

        # Direct file serving for packages (optional optimization)
        location /packages/ {
            alias /data/packages/;
            expires 1h;
            add_header Cache-Control "public, immutable";
            
            # Security: only serve .rpyx files
            location ~* \.rpyx$ {
                try_files $uri =404;
            }
            
            # Deny access to other files
            location ~* \.(py|json|yaml|toml)$ {
                deny all;
            }
        }

        # Root and documentation
        location / {
            proxy_pass http://registry;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check
        location /health {
            proxy_pass http://registry/api/stats;
            access_log off;
        }

        # Deny access to sensitive files
        location ~ /\. {
            deny all;
        }

        location ~ \.(log|conf|key|pem)$ {
            deny all;
        }
    }

    # HTTPS configuration (uncomment for production with SSL)
    # server {
    #     listen 443 ssl http2;
    #     server_name your-registry.com;
    #     
    #     ssl_certificate /etc/ssl/certs/registry.crt;
    #     ssl_certificate_key /etc/ssl/certs/registry.key;
    #     
    #     # SSL configuration
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 10m;
    #     
    #     # HSTS
    #     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    #     
    #     # Rest of configuration same as HTTP
    #     # ... (copy from above)
    # }

    # Redirect HTTP to HTTPS (uncomment for production)
    # server {
    #     listen 80;
    #     server_name your-registry.com;
    #     return 301 https://$server_name$request_uri;
    # }